// <auto-generated />
using System;
using LearningApplicantWeb.Models.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningApplicantWeb.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20250804073242_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ApplicantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("birth_place");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'-'");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("education");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nik")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nik");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<string>("RegisterCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("register_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("ApplicantId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PositionId" }, "applicant_job_position_FK");

                    b.ToTable("applicant", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.ApplicantStatus", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approved");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("ApplicantId")
                        .HasName("PRIMARY");

                    b.ToTable("applicant_status", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.JobPosition", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'-'");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("position_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("PositionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PositionName" }, "job_position_unique")
                        .IsUnique();

                    b.ToTable("job_position", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "roles_unique")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("username");

                    b.Property<string>("Password")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Username")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "users_roles_FK");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Workflow", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnType("int")
                        .HasColumnName("workflow_id");

                    b.Property<string>("WorkflowDescription")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("workflow_description");

                    b.Property<string>("WorkflowSlug")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)")
                        .HasColumnName("workflow_slug");

                    b.HasKey("WorkflowId")
                        .HasName("PRIMARY");

                    b.ToTable("workflow", (string)null);
                });

            modelBuilder.Entity("WorkflowRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int")
                        .HasColumnName("workflow_id");

                    b.HasKey("RoleId", "WorkflowId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "WorkflowId" }, "workflow_role_workflow_FK");

                    b.ToTable("workflow_role", (string)null);
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Applicant", b =>
                {
                    b.HasOne("LearningApplicantWeb.Models.EF.JobPosition", "Position")
                        .WithMany("Applicants")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("applicant_job_position_FK");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.ApplicantStatus", b =>
                {
                    b.HasOne("LearningApplicantWeb.Models.EF.Applicant", "Applicant")
                        .WithOne("ApplicantStatus")
                        .HasForeignKey("LearningApplicantWeb.Models.EF.ApplicantStatus", "ApplicantId")
                        .IsRequired()
                        .HasConstraintName("applicant_status_applicant_FK");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.User", b =>
                {
                    b.HasOne("LearningApplicantWeb.Models.EF.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_roles_FK");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkflowRole", b =>
                {
                    b.HasOne("LearningApplicantWeb.Models.EF.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("workflow_role_roles_FK");

                    b.HasOne("LearningApplicantWeb.Models.EF.Workflow", null)
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("workflow_role_workflow_FK");
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Applicant", b =>
                {
                    b.Navigation("ApplicantStatus");
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.JobPosition", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("LearningApplicantWeb.Models.EF.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
